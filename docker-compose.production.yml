version: "3.4"
services:
  frontend:
    build:
      context: ./frontend
      # get BUILD_TARGET from env file or set to production
      target: ${BUILD_TARGET:-production}
    environment:
      - WATCHPACK_POLLING=true
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "0.0.0.0:3000:3000"
#    stop_signal: SIGKILL
#    entrypoint: ["tail", "-f", "/dev/null"]
  backend:
    build:
      context: ./backend
      # get BUILD_TARGET from env file or set to production
      target: ${BUILD_TARGET:-production}
    environment:
       - POSTGRES_DB_HOST=${FALLBACK_HOST}
    env_file:
      - .env
    networks:
      - nestjs-network
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "0.0.0.0:5001:5001"
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PG_DATA: /var/lib/postgresql/data
    networks:
      - nestjs-network
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - ./pgdata/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=$POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 200
  pgadmin:
    links:
      - postgres:postgres
    container_name: pgadmin
    image: dpage/pgadmin4
    volumes:
      - ./pgdata/pgadmin:/root/.pgadmin
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "0.0.0.0:5002:80"
    networks:
      - nestjs-network
networks:
  nestjs-network:
