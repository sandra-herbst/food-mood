version: "3.4"
services:
  frontend:
    image: pluswerk/node-dev:18
    user: "node"
    working_dir: /app
    environment:
      - NODE_ENV=${NODE_ENV}
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "0.0.0.0:3000:3000"
#    stop_signal: SIGKILL
#    entrypoint: ["tail", "-f", "/dev/null"]
    command: bash -c "yarn install --non-interactive && yarn run start"
  backend:
    image: pluswerk/node-dev:18
    user: "node"
    working_dir: /app
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_DB_HOST=${FALLBACK_HOST}
    env_file:
      - .env
    networks:
      - nestjs-network
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "0.0.0.0:5001:5001"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5001/api" ]
      interval: 10s
      timeout: 5s
      retries: 200
      start_period: 10s
    command: bash -c "yarn install --non-interactive && IS_STARTUP=true yarn run seed:run && yarn run start:dev"
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      PG_DATA: /var/lib/postgresql/data
    networks:
      - nestjs-network
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - ./pgdata/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=$POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 200
  pgadmin:
    links:
      - postgres:postgres
    container_name: pgadmin
    image: dpage/pgadmin4
    volumes:
      - ./pgdata/pgadmin:/root/.pgadmin
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "0.0.0.0:5002:80"
    networks:
      - nestjs-network
networks:
  nestjs-network:
